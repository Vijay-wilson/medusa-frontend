{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/My-Files/medusa-frontend/src/lib/data/cart.ts"],"sourcesContent":["\"use server\"\n\nimport { sdk } from \"@lib/config\"\nimport medusaError from \"@lib/util/medusa-error\"\nimport { HttpTypes } from \"@medusajs/types\"\nimport { revalidateTag } from \"next/cache\"\nimport { redirect } from \"next/navigation\"\nimport {\n  getAuthHeaders,\n  getCacheOptions,\n  getCacheTag,\n  getCartId,\n  removeCartId,\n  setCartId,\n} from \"./cookies\"\nimport { getRegion } from \"./regions\"\n\n/**\n * Retrieves a cart by its ID. If no ID is provided, it will use the cart ID from the cookies.\n * @param cartId - optional - The ID of the cart to retrieve.\n * @returns The cart object if found, or null if not found.\n */\nexport async function retrieveCart(cartId?: string) {\n  const id = cartId || (await getCartId())\n\n  if (!id) {\n    return null\n  }\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  const next = {\n    ...(await getCacheOptions(\"carts\")),\n  }\n\n  return await sdk.client\n    .fetch<HttpTypes.StoreCartResponse>(`/store/carts/${id}`, {\n      method: \"GET\",\n      query: {\n        fields:\n          \"*items, *region, *items.product, *items.variant, *items.thumbnail, *items.metadata, +items.total, *promotions, +shipping_methods.name\",\n      },\n      headers,\n      next,\n      cache: \"force-cache\",\n    })\n    .then(({ cart }) => cart)\n    .catch(() => null)\n}\n\nexport async function getOrSetCart(countryCode: string) {\n  const region = await getRegion(countryCode)\n\n  if (!region) {\n    throw new Error(`Region not found for country code: ${countryCode}`)\n  }\n\n  let cart = await retrieveCart()\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  if (!cart) {\n    const cartResp = await sdk.store.cart.create(\n      { region_id: region.id },\n      {},\n      headers\n    )\n    cart = cartResp.cart\n\n    await setCartId(cart.id)\n\n    const cartCacheTag = await getCacheTag(\"carts\")\n    revalidateTag(cartCacheTag)\n  }\n\n  if (cart && cart?.region_id !== region.id) {\n    await sdk.store.cart.update(cart.id, { region_id: region.id }, {}, headers)\n    const cartCacheTag = await getCacheTag(\"carts\")\n    revalidateTag(cartCacheTag)\n  }\n\n  return cart\n}\n\nexport async function updateCart(data: HttpTypes.StoreUpdateCart) {\n  const cartId = await getCartId()\n\n  if (!cartId) {\n    throw new Error(\"No existing cart found, please create one before updating\")\n  }\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  return sdk.store.cart\n    .update(cartId, data, {}, headers)\n    .then(async ({ cart }) => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n\n      const fulfillmentCacheTag = await getCacheTag(\"fulfillment\")\n      revalidateTag(fulfillmentCacheTag)\n\n      return cart\n    })\n    .catch(medusaError)\n}\n\nexport async function addToCart({\n  variantId,\n  quantity,\n  countryCode,\n}: {\n  variantId: string\n  quantity: number\n  countryCode: string\n}) {\n  if (!variantId) {\n    throw new Error(\"Missing variant ID when adding to cart\")\n  }\n\n  const cart = await getOrSetCart(countryCode)\n\n  if (!cart) {\n    throw new Error(\"Error retrieving or creating cart\")\n  }\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  await sdk.store.cart\n    .createLineItem(\n      cart.id,\n      {\n        variant_id: variantId,\n        quantity,\n      },\n      {},\n      headers\n    )\n    .then(async () => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n\n      const fulfillmentCacheTag = await getCacheTag(\"fulfillment\")\n      revalidateTag(fulfillmentCacheTag)\n    })\n    .catch(medusaError)\n}\n\nexport async function updateLineItem({\n  lineId,\n  quantity,\n}: {\n  lineId: string\n  quantity: number\n}) {\n  if (!lineId) {\n    throw new Error(\"Missing lineItem ID when updating line item\")\n  }\n\n  const cartId = await getCartId()\n\n  if (!cartId) {\n    throw new Error(\"Missing cart ID when updating line item\")\n  }\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  await sdk.store.cart\n    .updateLineItem(cartId, lineId, { quantity }, {}, headers)\n    .then(async () => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n\n      const fulfillmentCacheTag = await getCacheTag(\"fulfillment\")\n      revalidateTag(fulfillmentCacheTag)\n    })\n    .catch(medusaError)\n}\n\nexport async function deleteLineItem(lineId: string) {\n  if (!lineId) {\n    throw new Error(\"Missing lineItem ID when deleting line item\")\n  }\n\n  const cartId = await getCartId()\n\n  if (!cartId) {\n    throw new Error(\"Missing cart ID when deleting line item\")\n  }\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  await sdk.store.cart\n    .deleteLineItem(cartId, lineId, headers)\n    .then(async () => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n\n      const fulfillmentCacheTag = await getCacheTag(\"fulfillment\")\n      revalidateTag(fulfillmentCacheTag)\n    })\n    .catch(medusaError)\n}\n\nexport async function setShippingMethod({\n  cartId,\n  shippingMethodId,\n}: {\n  cartId: string\n  shippingMethodId: string\n}) {\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  return sdk.store.cart\n    .addShippingMethod(cartId, { option_id: shippingMethodId }, {}, headers)\n    .then(async () => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n    })\n    .catch(medusaError)\n}\n\nexport async function initiatePaymentSession(\n  cart: HttpTypes.StoreCart,\n  data: HttpTypes.StoreInitializePaymentSession\n) {\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  return sdk.store.payment\n    .initiatePaymentSession(cart, data, {}, headers)\n    .then(async (resp) => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n      return resp\n    })\n    .catch(medusaError)\n}\n\nexport async function applyPromotions(codes: string[]) {\n  const cartId = await getCartId()\n\n  if (!cartId) {\n    throw new Error(\"No existing cart found\")\n  }\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  return sdk.store.cart\n    .update(cartId, { promo_codes: codes }, {}, headers)\n    .then(async () => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n\n      const fulfillmentCacheTag = await getCacheTag(\"fulfillment\")\n      revalidateTag(fulfillmentCacheTag)\n    })\n    .catch(medusaError)\n}\n\nexport async function applyGiftCard(code: string) {\n  //   const cartId = getCartId()\n  //   if (!cartId) return \"No cartId cookie found\"\n  //   try {\n  //     await updateCart(cartId, { gift_cards: [{ code }] }).then(() => {\n  //       revalidateTag(\"cart\")\n  //     })\n  //   } catch (error: any) {\n  //     throw error\n  //   }\n}\n\nexport async function removeDiscount(code: string) {\n  // const cartId = getCartId()\n  // if (!cartId) return \"No cartId cookie found\"\n  // try {\n  //   await deleteDiscount(cartId, code)\n  //   revalidateTag(\"cart\")\n  // } catch (error: any) {\n  //   throw error\n  // }\n}\n\nexport async function removeGiftCard(\n  codeToRemove: string,\n  giftCards: any[]\n  // giftCards: GiftCard[]\n) {\n  //   const cartId = getCartId()\n  //   if (!cartId) return \"No cartId cookie found\"\n  //   try {\n  //     await updateCart(cartId, {\n  //       gift_cards: [...giftCards]\n  //         .filter((gc) => gc.code !== codeToRemove)\n  //         .map((gc) => ({ code: gc.code })),\n  //     }).then(() => {\n  //       revalidateTag(\"cart\")\n  //     })\n  //   } catch (error: any) {\n  //     throw error\n  //   }\n}\n\nexport async function submitPromotionForm(\n  currentState: unknown,\n  formData: FormData\n) {\n  const code = formData.get(\"code\") as string\n  try {\n    await applyPromotions([code])\n  } catch (e: any) {\n    return e.message\n  }\n}\n\n// TODO: Pass a POJO instead of a form entity here\nexport async function setAddresses(currentState: unknown, formData: FormData) {\n  try {\n    if (!formData) {\n      throw new Error(\"No form data found when setting addresses\")\n    }\n    const cartId = getCartId()\n    if (!cartId) {\n      throw new Error(\"No existing cart found when setting addresses\")\n    }\n\n    const data = {\n      shipping_address: {\n        first_name: formData.get(\"shipping_address.first_name\"),\n        last_name: formData.get(\"shipping_address.last_name\"),\n        address_1: formData.get(\"shipping_address.address_1\"),\n        address_2: \"\",\n        company: formData.get(\"shipping_address.company\"),\n        postal_code: formData.get(\"shipping_address.postal_code\"),\n        city: formData.get(\"shipping_address.city\"),\n        country_code: formData.get(\"shipping_address.country_code\"),\n        province: formData.get(\"shipping_address.province\"),\n        phone: formData.get(\"shipping_address.phone\"),\n      },\n      email: formData.get(\"email\"),\n    } as any\n\n    const sameAsBilling = formData.get(\"same_as_billing\")\n    if (sameAsBilling === \"on\") data.billing_address = data.shipping_address\n\n    if (sameAsBilling !== \"on\")\n      data.billing_address = {\n        first_name: formData.get(\"billing_address.first_name\"),\n        last_name: formData.get(\"billing_address.last_name\"),\n        address_1: formData.get(\"billing_address.address_1\"),\n        address_2: \"\",\n        company: formData.get(\"billing_address.company\"),\n        postal_code: formData.get(\"billing_address.postal_code\"),\n        city: formData.get(\"billing_address.city\"),\n        country_code: formData.get(\"billing_address.country_code\"),\n        province: formData.get(\"billing_address.province\"),\n        phone: formData.get(\"billing_address.phone\"),\n      }\n    await updateCart(data)\n  } catch (e: any) {\n    return e.message\n  }\n\n  redirect(\n    `/${formData.get(\"shipping_address.country_code\")}/checkout?step=delivery`\n  )\n}\n\n/**\n * Places an order for a cart. If no cart ID is provided, it will use the cart ID from the cookies.\n * @param cartId - optional - The ID of the cart to place an order for.\n * @returns The cart object if the order was successful, or null if not.\n */\nexport async function placeOrder(cartId?: string) {\n  const id = cartId || (await getCartId())\n\n  if (!id) {\n    throw new Error(\"No existing cart found when placing an order\")\n  }\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  const cartRes = await sdk.store.cart\n    .complete(id, {}, headers)\n    .then(async (cartRes) => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n      return cartRes\n    })\n    .catch(medusaError)\n\n  if (cartRes?.type === \"order\") {\n    const countryCode =\n      cartRes.order.shipping_address?.country_code?.toLowerCase()\n\n    const orderCacheTag = await getCacheTag(\"orders\")\n    revalidateTag(orderCacheTag)\n\n    removeCartId()\n    redirect(`/${countryCode}/order/${cartRes?.order.id}/confirmed`)\n  }\n\n  return cartRes.cart\n}\n\n/**\n * Updates the countrycode param and revalidates the regions cache\n * @param regionId\n * @param countryCode\n */\nexport async function updateRegion(countryCode: string, currentPath: string) {\n  const cartId = await getCartId()\n  const region = await getRegion(countryCode)\n\n  if (!region) {\n    throw new Error(`Region not found for country code: ${countryCode}`)\n  }\n\n  if (cartId) {\n    await updateCart({ region_id: region.id })\n    const cartCacheTag = await getCacheTag(\"carts\")\n    revalidateTag(cartCacheTag)\n  }\n\n  const regionCacheTag = await getCacheTag(\"regions\")\n  revalidateTag(regionCacheTag)\n\n  const productsCacheTag = await getCacheTag(\"products\")\n  revalidateTag(productsCacheTag)\n\n  redirect(`/${countryCode}${currentPath}`)\n}\n\nexport async function listCartOptions() {\n  const cartId = await getCartId()\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n  const next = {\n    ...(await getCacheOptions(\"shippingOptions\")),\n  }\n\n  return await sdk.client.fetch<{\n    shipping_options: HttpTypes.StoreCartShippingOption[]\n  }>(\"/store/shipping-options\", {\n    query: { cart_id: cartId },\n    next,\n    headers,\n    cache: \"force-cache\",\n  })\n}\n"],"names":[],"mappings":";;;;;;IA4JsB,iBAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 20, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/My-Files/medusa-frontend/src/modules/common/icons/chevron-down.tsx"],"sourcesContent":["import React from \"react\"\n\nimport { IconProps } from \"types/icon\"\n\nconst ChevronDown: React.FC<IconProps> = ({\n  size = \"16\",\n  color = \"currentColor\",\n  ...attributes\n}) => {\n  return (\n    <svg\n      width={size}\n      height={size}\n      viewBox=\"0 0 16 16\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...attributes}\n    >\n      <path\n        d=\"M4 6L8 10L12 6\"\n        stroke={color}\n        strokeWidth=\"1.5\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n    </svg>\n  )\n}\n\nexport default ChevronDown\n"],"names":[],"mappings":";;;;;AAIA,MAAM,cAAmC,CAAC,EACxC,OAAO,IAAI,EACX,QAAQ,cAAc,EACtB,GAAG,YACJ;IACC,qBACE,8OAAC;QACC,OAAO;QACP,QAAQ;QACR,SAAQ;QACR,MAAK;QACL,OAAM;QACL,GAAG,UAAU;kBAEd,cAAA,8OAAC;YACC,GAAE;YACF,QAAQ;YACR,aAAY;YACZ,eAAc;YACd,gBAAe;;;;;;;;;;;AAIvB;uCAEe","debugId":null}},
    {"offset": {"line": 57, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/My-Files/medusa-frontend/src/modules/cart/components/cart-item-select/index.tsx"],"sourcesContent":["\"use client\"\n\nimport { IconBadge, clx } from \"@medusajs/ui\"\nimport {\n  SelectHTMLAttributes,\n  forwardRef,\n  useEffect,\n  useImperativeHandle,\n  useRef,\n  useState,\n} from \"react\"\n\nimport ChevronDown from \"@modules/common/icons/chevron-down\"\n\ntype NativeSelectProps = {\n  placeholder?: string\n  errors?: Record<string, unknown>\n  touched?: Record<string, unknown>\n} & Omit<SelectHTMLAttributes<HTMLSelectElement>, \"size\">\n\nconst CartItemSelect = forwardRef<HTMLSelectElement, NativeSelectProps>(\n  ({ placeholder = \"Select...\", className, children, ...props }, ref) => {\n    const innerRef = useRef<HTMLSelectElement>(null)\n    const [isPlaceholder, setIsPlaceholder] = useState(false)\n\n    useImperativeHandle<HTMLSelectElement | null, HTMLSelectElement | null>(\n      ref,\n      () => innerRef.current\n    )\n\n    useEffect(() => {\n      if (innerRef.current && innerRef.current.value === \"\") {\n        setIsPlaceholder(true)\n      } else {\n        setIsPlaceholder(false)\n      }\n    }, [innerRef.current?.value])\n\n    return (\n      <div>\n        <IconBadge\n          onFocus={() => innerRef.current?.focus()}\n          onBlur={() => innerRef.current?.blur()}\n          className={clx(\n            \"relative flex items-center txt-compact-small border text-ui-fg-base group\",\n            className,\n            {\n              \"text-ui-fg-subtle\": isPlaceholder,\n            }\n          )}\n        >\n          <select\n            ref={innerRef}\n            {...props}\n            className=\"appearance-none bg-transparent border-none px-4 transition-colors duration-150 focus:border-gray-700 outline-none w-16 h-16 items-center justify-center\"\n          >\n            <option disabled value=\"\">\n              {placeholder}\n            </option>\n            {children}\n          </select>\n          <span className=\"absolute flex pointer-events-none justify-end w-8 group-hover:animate-pulse\">\n            <ChevronDown />\n          </span>\n        </IconBadge>\n      </div>\n    )\n  }\n)\n\nCartItemSelect.displayName = \"CartItemSelect\"\n\nexport default CartItemSelect\n"],"names":[],"mappings":";;;;AAEA;AAAA;AACA;AASA;AAZA;;;;;AAoBA,MAAM,+BAAiB,CAAA,GAAA,qMAAA,CAAA,aAAU,AAAD,EAC9B,CAAC,EAAE,cAAc,WAAW,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,OAAO,EAAE;IAC7D,MAAM,WAAW,CAAA,GAAA,qMAAA,CAAA,SAAM,AAAD,EAAqB;IAC3C,MAAM,CAAC,eAAe,iBAAiB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IAEnD,CAAA,GAAA,qMAAA,CAAA,sBAAmB,AAAD,EAChB,KACA,IAAM,SAAS,OAAO;IAGxB,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,IAAI,SAAS,OAAO,IAAI,SAAS,OAAO,CAAC,KAAK,KAAK,IAAI;YACrD,iBAAiB;QACnB,OAAO;YACL,iBAAiB;QACnB;IACF,GAAG;QAAC,SAAS,OAAO,EAAE;KAAM;IAE5B,qBACE,8OAAC;kBACC,cAAA,8OAAC,+LAAA,CAAA,YAAS;YACR,SAAS,IAAM,SAAS,OAAO,EAAE;YACjC,QAAQ,IAAM,SAAS,OAAO,EAAE;YAChC,WAAW,CAAA,GAAA,+JAAA,CAAA,MAAG,AAAD,EACX,6EACA,WACA;gBACE,qBAAqB;YACvB;;8BAGF,8OAAC;oBACC,KAAK;oBACJ,GAAG,KAAK;oBACT,WAAU;;sCAEV,8OAAC;4BAAO,QAAQ;4BAAC,OAAM;sCACpB;;;;;;wBAEF;;;;;;;8BAEH,8OAAC;oBAAK,WAAU;8BACd,cAAA,8OAAC,qJAAA,CAAA,UAAW;;;;;;;;;;;;;;;;;;;;;AAKtB;AAGF,eAAe,WAAW,GAAG;uCAEd","debugId":null}},
    {"offset": {"line": 144, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/My-Files/medusa-frontend/src/modules/checkout/components/error-message/index.tsx"],"sourcesContent":["const ErrorMessage = ({ error, 'data-testid': dataTestid }: { error?: string | null, 'data-testid'?: string }) => {\n  if (!error) {\n    return null\n  }\n\n  return (\n    <div className=\"pt-2 text-rose-500 text-small-regular\" data-testid={dataTestid}>\n      <span>{error}</span>\n    </div>\n  )\n}\n\nexport default ErrorMessage\n"],"names":[],"mappings":";;;;;AAAA,MAAM,eAAe,CAAC,EAAE,KAAK,EAAE,eAAe,UAAU,EAAqD;IAC3G,IAAI,CAAC,OAAO;QACV,OAAO;IACT;IAEA,qBACE,8OAAC;QAAI,WAAU;QAAwC,eAAa;kBAClE,cAAA,8OAAC;sBAAM;;;;;;;;;;;AAGb;uCAEe","debugId":null}},
    {"offset": {"line": 176, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/My-Files/medusa-frontend/src/modules/common/components/line-item-unit-price/index.tsx"],"sourcesContent":["import { convertToLocale } from \"@lib/util/money\"\nimport { HttpTypes } from \"@medusajs/types\"\nimport { clx } from \"@medusajs/ui\"\n\ntype LineItemUnitPriceProps = {\n  item: HttpTypes.StoreCartLineItem | HttpTypes.StoreOrderLineItem\n  style?: \"default\" | \"tight\"\n  currencyCode: string\n}\n\nconst LineItemUnitPrice = ({\n  item,\n  style = \"default\",\n  currencyCode,\n}: LineItemUnitPriceProps) => {\n  const { total, original_total } = item\n  const hasReducedPrice = total < original_total\n\n  const percentage_diff = Math.round(\n    ((original_total - total) / original_total) * 100\n  )\n\n  return (\n    <div className=\"flex flex-col text-ui-fg-muted justify-center h-full\">\n      {hasReducedPrice && (\n        <>\n          <p>\n            {style === \"default\" && (\n              <span className=\"text-ui-fg-muted\">Original: </span>\n            )}\n            <span\n              className=\"line-through\"\n              data-testid=\"product-unit-original-price\"\n            >\n              {convertToLocale({\n                amount: original_total / item.quantity,\n                currency_code: currencyCode,\n              })}\n            </span>\n          </p>\n          {style === \"default\" && (\n            <span className=\"text-ui-fg-interactive\">-{percentage_diff}%</span>\n          )}\n        </>\n      )}\n      <span\n        className={clx(\"text-base-regular\", {\n          \"text-ui-fg-interactive\": hasReducedPrice,\n        })}\n        data-testid=\"product-unit-price\"\n      >\n        {convertToLocale({\n          amount: total / item.quantity,\n          currency_code: currencyCode,\n        })}\n      </span>\n    </div>\n  )\n}\n\nexport default LineItemUnitPrice\n"],"names":[],"mappings":";;;;AAAA;AAEA;;;;AAQA,MAAM,oBAAoB,CAAC,EACzB,IAAI,EACJ,QAAQ,SAAS,EACjB,YAAY,EACW;IACvB,MAAM,EAAE,KAAK,EAAE,cAAc,EAAE,GAAG;IAClC,MAAM,kBAAkB,QAAQ;IAEhC,MAAM,kBAAkB,KAAK,KAAK,CAChC,AAAC,CAAC,iBAAiB,KAAK,IAAI,iBAAkB;IAGhD,qBACE,8OAAC;QAAI,WAAU;;YACZ,iCACC;;kCACE,8OAAC;;4BACE,UAAU,2BACT,8OAAC;gCAAK,WAAU;0CAAmB;;;;;;0CAErC,8OAAC;gCACC,WAAU;gCACV,eAAY;0CAEX,CAAA,GAAA,2HAAA,CAAA,kBAAe,AAAD,EAAE;oCACf,QAAQ,iBAAiB,KAAK,QAAQ;oCACtC,eAAe;gCACjB;;;;;;;;;;;;oBAGH,UAAU,2BACT,8OAAC;wBAAK,WAAU;;4BAAyB;4BAAE;4BAAgB;;;;;;;;;0BAIjE,8OAAC;gBACC,WAAW,CAAA,GAAA,+JAAA,CAAA,MAAG,AAAD,EAAE,qBAAqB;oBAClC,0BAA0B;gBAC5B;gBACA,eAAY;0BAEX,CAAA,GAAA,2HAAA,CAAA,kBAAe,AAAD,EAAE;oBACf,QAAQ,QAAQ,KAAK,QAAQ;oBAC7B,eAAe;gBACjB;;;;;;;;;;;;AAIR;uCAEe","debugId":null}},
    {"offset": {"line": 264, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/My-Files/medusa-frontend/src/modules/common/icons/spinner.tsx"],"sourcesContent":["import React from \"react\"\n\nimport { IconProps } from \"types/icon\"\n\nconst Spinner: React.FC<IconProps> = ({\n  size = \"16\",\n  color = \"currentColor\",\n  ...attributes\n}) => {\n  return (\n    <svg\n      className=\"animate-spin\"\n      width={size}\n      height={size}\n      xmlns=\"http://www.w3.org/2000/svg\"\n      fill=\"none\"\n      viewBox=\"0 0 24 24\"\n      {...attributes}\n    >\n      <circle\n        className=\"opacity-25\"\n        cx=\"12\"\n        cy=\"12\"\n        r=\"10\"\n        stroke={color}\n        strokeWidth=\"4\"\n      ></circle>\n      <path\n        className=\"opacity-75\"\n        fill={color}\n        d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n      ></path>\n    </svg>\n  )\n}\n\nexport default Spinner\n"],"names":[],"mappings":";;;;;AAIA,MAAM,UAA+B,CAAC,EACpC,OAAO,IAAI,EACX,QAAQ,cAAc,EACtB,GAAG,YACJ;IACC,qBACE,8OAAC;QACC,WAAU;QACV,OAAO;QACP,QAAQ;QACR,OAAM;QACN,MAAK;QACL,SAAQ;QACP,GAAG,UAAU;;0BAEd,8OAAC;gBACC,WAAU;gBACV,IAAG;gBACH,IAAG;gBACH,GAAE;gBACF,QAAQ;gBACR,aAAY;;;;;;0BAEd,8OAAC;gBACC,WAAU;gBACV,MAAM;gBACN,GAAE;;;;;;;;;;;;AAIV;uCAEe","debugId":null}},
    {"offset": {"line": 314, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/My-Files/medusa-frontend/src/modules/cart/components/item/index.tsx"],"sourcesContent":["\"use client\"\n\nimport { Table, Text, clx } from \"@medusajs/ui\"\nimport { updateLineItem } from \"@lib/data/cart\"\nimport { HttpTypes } from \"@medusajs/types\"\nimport CartItemSelect from \"@modules/cart/components/cart-item-select\"\nimport ErrorMessage from \"@modules/checkout/components/error-message\"\nimport DeleteButton from \"@modules/common/components/delete-button\"\nimport LineItemOptions from \"@modules/common/components/line-item-options\"\nimport LineItemPrice from \"@modules/common/components/line-item-price\"\nimport LineItemUnitPrice from \"@modules/common/components/line-item-unit-price\"\nimport LocalizedClientLink from \"@modules/common/components/localized-client-link\"\nimport Spinner from \"@modules/common/icons/spinner\"\nimport Thumbnail from \"@modules/products/components/thumbnail\"\nimport { useState } from \"react\"\n\ntype ItemProps = {\n  item: HttpTypes.StoreCartLineItem\n  type?: \"full\" | \"preview\"\n  currencyCode: string\n}\n\nconst Item = ({ item, type = \"full\", currencyCode }: ItemProps) => {\n  const [updating, setUpdating] = useState(false)\n  const [error, setError] = useState<string | null>(null)\n\n  const changeQuantity = async (quantity: number) => {\n    setError(null)\n    setUpdating(true)\n\n    await updateLineItem({\n      lineId: item.id,\n      quantity,\n    })\n      .catch((err) => {\n        setError(err.message)\n      })\n      .finally(() => {\n        setUpdating(false)\n      })\n  }\n\n  // TODO: Update this to grab the actual max inventory\n  const maxQtyFromInventory = 10\n  const maxQuantity = item.variant?.manage_inventory ? 10 : maxQtyFromInventory\n\n  return (\n    <Table.Row className=\"w-full\" data-testid=\"product-row\">\n      <Table.Cell className=\"!pl-0 p-4 w-24\">\n        <LocalizedClientLink\n          href={`/products/${item.product_handle}`}\n          className={clx(\"flex\", {\n            \"w-16\": type === \"preview\",\n            \"small:w-24 w-12\": type === \"full\",\n          })}\n        >\n          <Thumbnail\n            thumbnail={item.thumbnail}\n            images={item.variant?.product?.images}\n            size=\"square\"\n          />\n        </LocalizedClientLink>\n      </Table.Cell>\n\n      <Table.Cell className=\"text-left\">\n        <Text\n          className=\"txt-medium-plus text-ui-fg-base\"\n          data-testid=\"product-title\"\n        >\n          {item.product_title}\n        </Text>\n        <LineItemOptions variant={item.variant} data-testid=\"product-variant\" />\n      </Table.Cell>\n\n      {type === \"full\" && (\n        <Table.Cell>\n          <div className=\"flex gap-2 items-center w-28\">\n            <DeleteButton id={item.id} data-testid=\"product-delete-button\" />\n            <CartItemSelect\n              value={item.quantity}\n              onChange={(value) => changeQuantity(parseInt(value.target.value))}\n              className=\"w-14 h-10 p-4\"\n              data-testid=\"product-select-button\"\n            >\n              {/* TODO: Update this with the v2 way of managing inventory */}\n              {Array.from(\n                {\n                  length: Math.min(maxQuantity, 10),\n                },\n                (_, i) => (\n                  <option value={i + 1} key={i}>\n                    {i + 1}\n                  </option>\n                )\n              )}\n\n              <option value={1} key={1}>\n                1\n              </option>\n            </CartItemSelect>\n            {updating && <Spinner />}\n          </div>\n          <ErrorMessage error={error} data-testid=\"product-error-message\" />\n        </Table.Cell>\n      )}\n\n      {type === \"full\" && (\n        <Table.Cell className=\"hidden small:table-cell\">\n          <LineItemUnitPrice\n            item={item}\n            style=\"tight\"\n            currencyCode={currencyCode}\n          />\n        </Table.Cell>\n      )}\n\n      <Table.Cell className=\"!pr-0\">\n        <span\n          className={clx(\"!pr-0\", {\n            \"flex flex-col items-end h-full justify-center\": type === \"preview\",\n          })}\n        >\n          {type === \"preview\" && (\n            <span className=\"flex gap-x-1 \">\n              <Text className=\"text-ui-fg-muted\">{item.quantity}x </Text>\n              <LineItemUnitPrice\n                item={item}\n                style=\"tight\"\n                currencyCode={currencyCode}\n              />\n            </span>\n          )}\n          <LineItemPrice\n            item={item}\n            style=\"tight\"\n            currencyCode={currencyCode}\n          />\n        </span>\n      </Table.Cell>\n    </Table.Row>\n  )\n}\n\nexport default Item\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 575, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/My-Files/medusa-frontend/src/modules/common/components/cart-totals/index.tsx"],"sourcesContent":["\"use client\"\n\nimport { convertToLocale } from \"@lib/util/money\"\nimport React from \"react\"\n\ntype CartTotalsProps = {\n  totals: {\n    total?: number | null\n    subtotal?: number | null\n    tax_total?: number | null\n    shipping_total?: number | null\n    discount_total?: number | null\n    gift_card_total?: number | null\n    currency_code: string\n    shipping_subtotal?: number | null\n  }\n}\n\nconst CartTotals: React.FC<CartTotalsProps> = ({ totals }) => {\n  const {\n    currency_code,\n    total,\n    subtotal,\n    tax_total,\n    discount_total,\n    gift_card_total,\n    shipping_subtotal,\n  } = totals\n\n  return (\n    <div>\n      <div className=\"flex flex-col gap-y-2 txt-medium text-ui-fg-subtle \">\n        <div className=\"flex items-center justify-between\">\n          <span className=\"flex gap-x-1 items-center\">\n            Subtotal (excl. shipping and taxes)\n          </span>\n          <span data-testid=\"cart-subtotal\" data-value={subtotal || 0}>\n            {convertToLocale({ amount: subtotal ?? 0, currency_code })}\n          </span>\n        </div>\n        {!!discount_total && (\n          <div className=\"flex items-center justify-between\">\n            <span>Discount</span>\n            <span\n              className=\"text-ui-fg-interactive\"\n              data-testid=\"cart-discount\"\n              data-value={discount_total || 0}\n            >\n              -{\" \"}\n              {convertToLocale({ amount: discount_total ?? 0, currency_code })}\n            </span>\n          </div>\n        )}\n        <div className=\"flex items-center justify-between\">\n          <span>Shipping</span>\n          <span data-testid=\"cart-shipping\" data-value={shipping_subtotal || 0}>\n            {convertToLocale({ amount: shipping_subtotal ?? 0, currency_code })}\n          </span>\n        </div>\n        <div className=\"flex justify-between\">\n          <span className=\"flex gap-x-1 items-center \">Taxes</span>\n          <span data-testid=\"cart-taxes\" data-value={tax_total || 0}>\n            {convertToLocale({ amount: tax_total ?? 0, currency_code })}\n          </span>\n        </div>\n        {!!gift_card_total && (\n          <div className=\"flex items-center justify-between\">\n            <span>Gift card</span>\n            <span\n              className=\"text-ui-fg-interactive\"\n              data-testid=\"cart-gift-card-amount\"\n              data-value={gift_card_total || 0}\n            >\n              -{\" \"}\n              {convertToLocale({ amount: gift_card_total ?? 0, currency_code })}\n            </span>\n          </div>\n        )}\n      </div>\n      <div className=\"h-px w-full border-b border-gray-200 my-4\" />\n      <div className=\"flex items-center justify-between text-ui-fg-base mb-2 txt-medium \">\n        <span>Total</span>\n        <span\n          className=\"txt-xlarge-plus\"\n          data-testid=\"cart-total\"\n          data-value={total || 0}\n        >\n          {convertToLocale({ amount: total ?? 0, currency_code })}\n        </span>\n      </div>\n      <div className=\"h-px w-full border-b border-gray-200 mt-4\" />\n    </div>\n  )\n}\n\nexport default CartTotals\n"],"names":[],"mappings":";;;;AAEA;AAFA;;;AAkBA,MAAM,aAAwC,CAAC,EAAE,MAAM,EAAE;IACvD,MAAM,EACJ,aAAa,EACb,KAAK,EACL,QAAQ,EACR,SAAS,EACT,cAAc,EACd,eAAe,EACf,iBAAiB,EAClB,GAAG;IAEJ,qBACE,8OAAC;;0BACC,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;wBAAI,WAAU;;0CACb,8OAAC;gCAAK,WAAU;0CAA4B;;;;;;0CAG5C,8OAAC;gCAAK,eAAY;gCAAgB,cAAY,YAAY;0CACvD,CAAA,GAAA,2HAAA,CAAA,kBAAe,AAAD,EAAE;oCAAE,QAAQ,YAAY;oCAAG;gCAAc;;;;;;;;;;;;oBAG3D,CAAC,CAAC,gCACD,8OAAC;wBAAI,WAAU;;0CACb,8OAAC;0CAAK;;;;;;0CACN,8OAAC;gCACC,WAAU;gCACV,eAAY;gCACZ,cAAY,kBAAkB;;oCAC/B;oCACG;oCACD,CAAA,GAAA,2HAAA,CAAA,kBAAe,AAAD,EAAE;wCAAE,QAAQ,kBAAkB;wCAAG;oCAAc;;;;;;;;;;;;;kCAIpE,8OAAC;wBAAI,WAAU;;0CACb,8OAAC;0CAAK;;;;;;0CACN,8OAAC;gCAAK,eAAY;gCAAgB,cAAY,qBAAqB;0CAChE,CAAA,GAAA,2HAAA,CAAA,kBAAe,AAAD,EAAE;oCAAE,QAAQ,qBAAqB;oCAAG;gCAAc;;;;;;;;;;;;kCAGrE,8OAAC;wBAAI,WAAU;;0CACb,8OAAC;gCAAK,WAAU;0CAA6B;;;;;;0CAC7C,8OAAC;gCAAK,eAAY;gCAAa,cAAY,aAAa;0CACrD,CAAA,GAAA,2HAAA,CAAA,kBAAe,AAAD,EAAE;oCAAE,QAAQ,aAAa;oCAAG;gCAAc;;;;;;;;;;;;oBAG5D,CAAC,CAAC,iCACD,8OAAC;wBAAI,WAAU;;0CACb,8OAAC;0CAAK;;;;;;0CACN,8OAAC;gCACC,WAAU;gCACV,eAAY;gCACZ,cAAY,mBAAmB;;oCAChC;oCACG;oCACD,CAAA,GAAA,2HAAA,CAAA,kBAAe,AAAD,EAAE;wCAAE,QAAQ,mBAAmB;wCAAG;oCAAc;;;;;;;;;;;;;;;;;;;0BAKvE,8OAAC;gBAAI,WAAU;;;;;;0BACf,8OAAC;gBAAI,WAAU;;kCACb,8OAAC;kCAAK;;;;;;kCACN,8OAAC;wBACC,WAAU;wBACV,eAAY;wBACZ,cAAY,SAAS;kCAEpB,CAAA,GAAA,2HAAA,CAAA,kBAAe,AAAD,EAAE;4BAAE,QAAQ,SAAS;4BAAG;wBAAc;;;;;;;;;;;;0BAGzD,8OAAC;gBAAI,WAAU;;;;;;;;;;;;AAGrB;uCAEe","debugId":null}},
    {"offset": {"line": 805, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/My-Files/medusa-frontend/src/modules/common/components/divider/index.tsx"],"sourcesContent":["import { clx } from \"@medusajs/ui\"\n\nconst Divider = ({ className }: { className?: string }) => (\n  <div\n    className={clx(\"h-px w-full border-b border-gray-200 mt-1\", className)}\n  />\n)\n\nexport default Divider\n"],"names":[],"mappings":";;;;AAAA;;;AAEA,MAAM,UAAU,CAAC,EAAE,SAAS,EAA0B,iBACpD,8OAAC;QACC,WAAW,CAAA,GAAA,+JAAA,CAAA,MAAG,AAAD,EAAE,6CAA6C;;;;;;uCAIjD","debugId":null}},
    {"offset": {"line": 826, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/My-Files/medusa-frontend/src/lib/data/cart.ts"],"sourcesContent":["\"use server\"\n\nimport { sdk } from \"@lib/config\"\nimport medusaError from \"@lib/util/medusa-error\"\nimport { HttpTypes } from \"@medusajs/types\"\nimport { revalidateTag } from \"next/cache\"\nimport { redirect } from \"next/navigation\"\nimport {\n  getAuthHeaders,\n  getCacheOptions,\n  getCacheTag,\n  getCartId,\n  removeCartId,\n  setCartId,\n} from \"./cookies\"\nimport { getRegion } from \"./regions\"\n\n/**\n * Retrieves a cart by its ID. If no ID is provided, it will use the cart ID from the cookies.\n * @param cartId - optional - The ID of the cart to retrieve.\n * @returns The cart object if found, or null if not found.\n */\nexport async function retrieveCart(cartId?: string) {\n  const id = cartId || (await getCartId())\n\n  if (!id) {\n    return null\n  }\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  const next = {\n    ...(await getCacheOptions(\"carts\")),\n  }\n\n  return await sdk.client\n    .fetch<HttpTypes.StoreCartResponse>(`/store/carts/${id}`, {\n      method: \"GET\",\n      query: {\n        fields:\n          \"*items, *region, *items.product, *items.variant, *items.thumbnail, *items.metadata, +items.total, *promotions, +shipping_methods.name\",\n      },\n      headers,\n      next,\n      cache: \"force-cache\",\n    })\n    .then(({ cart }) => cart)\n    .catch(() => null)\n}\n\nexport async function getOrSetCart(countryCode: string) {\n  const region = await getRegion(countryCode)\n\n  if (!region) {\n    throw new Error(`Region not found for country code: ${countryCode}`)\n  }\n\n  let cart = await retrieveCart()\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  if (!cart) {\n    const cartResp = await sdk.store.cart.create(\n      { region_id: region.id },\n      {},\n      headers\n    )\n    cart = cartResp.cart\n\n    await setCartId(cart.id)\n\n    const cartCacheTag = await getCacheTag(\"carts\")\n    revalidateTag(cartCacheTag)\n  }\n\n  if (cart && cart?.region_id !== region.id) {\n    await sdk.store.cart.update(cart.id, { region_id: region.id }, {}, headers)\n    const cartCacheTag = await getCacheTag(\"carts\")\n    revalidateTag(cartCacheTag)\n  }\n\n  return cart\n}\n\nexport async function updateCart(data: HttpTypes.StoreUpdateCart) {\n  const cartId = await getCartId()\n\n  if (!cartId) {\n    throw new Error(\"No existing cart found, please create one before updating\")\n  }\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  return sdk.store.cart\n    .update(cartId, data, {}, headers)\n    .then(async ({ cart }) => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n\n      const fulfillmentCacheTag = await getCacheTag(\"fulfillment\")\n      revalidateTag(fulfillmentCacheTag)\n\n      return cart\n    })\n    .catch(medusaError)\n}\n\nexport async function addToCart({\n  variantId,\n  quantity,\n  countryCode,\n}: {\n  variantId: string\n  quantity: number\n  countryCode: string\n}) {\n  if (!variantId) {\n    throw new Error(\"Missing variant ID when adding to cart\")\n  }\n\n  const cart = await getOrSetCart(countryCode)\n\n  if (!cart) {\n    throw new Error(\"Error retrieving or creating cart\")\n  }\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  await sdk.store.cart\n    .createLineItem(\n      cart.id,\n      {\n        variant_id: variantId,\n        quantity,\n      },\n      {},\n      headers\n    )\n    .then(async () => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n\n      const fulfillmentCacheTag = await getCacheTag(\"fulfillment\")\n      revalidateTag(fulfillmentCacheTag)\n    })\n    .catch(medusaError)\n}\n\nexport async function updateLineItem({\n  lineId,\n  quantity,\n}: {\n  lineId: string\n  quantity: number\n}) {\n  if (!lineId) {\n    throw new Error(\"Missing lineItem ID when updating line item\")\n  }\n\n  const cartId = await getCartId()\n\n  if (!cartId) {\n    throw new Error(\"Missing cart ID when updating line item\")\n  }\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  await sdk.store.cart\n    .updateLineItem(cartId, lineId, { quantity }, {}, headers)\n    .then(async () => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n\n      const fulfillmentCacheTag = await getCacheTag(\"fulfillment\")\n      revalidateTag(fulfillmentCacheTag)\n    })\n    .catch(medusaError)\n}\n\nexport async function deleteLineItem(lineId: string) {\n  if (!lineId) {\n    throw new Error(\"Missing lineItem ID when deleting line item\")\n  }\n\n  const cartId = await getCartId()\n\n  if (!cartId) {\n    throw new Error(\"Missing cart ID when deleting line item\")\n  }\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  await sdk.store.cart\n    .deleteLineItem(cartId, lineId, headers)\n    .then(async () => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n\n      const fulfillmentCacheTag = await getCacheTag(\"fulfillment\")\n      revalidateTag(fulfillmentCacheTag)\n    })\n    .catch(medusaError)\n}\n\nexport async function setShippingMethod({\n  cartId,\n  shippingMethodId,\n}: {\n  cartId: string\n  shippingMethodId: string\n}) {\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  return sdk.store.cart\n    .addShippingMethod(cartId, { option_id: shippingMethodId }, {}, headers)\n    .then(async () => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n    })\n    .catch(medusaError)\n}\n\nexport async function initiatePaymentSession(\n  cart: HttpTypes.StoreCart,\n  data: HttpTypes.StoreInitializePaymentSession\n) {\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  return sdk.store.payment\n    .initiatePaymentSession(cart, data, {}, headers)\n    .then(async (resp) => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n      return resp\n    })\n    .catch(medusaError)\n}\n\nexport async function applyPromotions(codes: string[]) {\n  const cartId = await getCartId()\n\n  if (!cartId) {\n    throw new Error(\"No existing cart found\")\n  }\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  return sdk.store.cart\n    .update(cartId, { promo_codes: codes }, {}, headers)\n    .then(async () => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n\n      const fulfillmentCacheTag = await getCacheTag(\"fulfillment\")\n      revalidateTag(fulfillmentCacheTag)\n    })\n    .catch(medusaError)\n}\n\nexport async function applyGiftCard(code: string) {\n  //   const cartId = getCartId()\n  //   if (!cartId) return \"No cartId cookie found\"\n  //   try {\n  //     await updateCart(cartId, { gift_cards: [{ code }] }).then(() => {\n  //       revalidateTag(\"cart\")\n  //     })\n  //   } catch (error: any) {\n  //     throw error\n  //   }\n}\n\nexport async function removeDiscount(code: string) {\n  // const cartId = getCartId()\n  // if (!cartId) return \"No cartId cookie found\"\n  // try {\n  //   await deleteDiscount(cartId, code)\n  //   revalidateTag(\"cart\")\n  // } catch (error: any) {\n  //   throw error\n  // }\n}\n\nexport async function removeGiftCard(\n  codeToRemove: string,\n  giftCards: any[]\n  // giftCards: GiftCard[]\n) {\n  //   const cartId = getCartId()\n  //   if (!cartId) return \"No cartId cookie found\"\n  //   try {\n  //     await updateCart(cartId, {\n  //       gift_cards: [...giftCards]\n  //         .filter((gc) => gc.code !== codeToRemove)\n  //         .map((gc) => ({ code: gc.code })),\n  //     }).then(() => {\n  //       revalidateTag(\"cart\")\n  //     })\n  //   } catch (error: any) {\n  //     throw error\n  //   }\n}\n\nexport async function submitPromotionForm(\n  currentState: unknown,\n  formData: FormData\n) {\n  const code = formData.get(\"code\") as string\n  try {\n    await applyPromotions([code])\n  } catch (e: any) {\n    return e.message\n  }\n}\n\n// TODO: Pass a POJO instead of a form entity here\nexport async function setAddresses(currentState: unknown, formData: FormData) {\n  try {\n    if (!formData) {\n      throw new Error(\"No form data found when setting addresses\")\n    }\n    const cartId = getCartId()\n    if (!cartId) {\n      throw new Error(\"No existing cart found when setting addresses\")\n    }\n\n    const data = {\n      shipping_address: {\n        first_name: formData.get(\"shipping_address.first_name\"),\n        last_name: formData.get(\"shipping_address.last_name\"),\n        address_1: formData.get(\"shipping_address.address_1\"),\n        address_2: \"\",\n        company: formData.get(\"shipping_address.company\"),\n        postal_code: formData.get(\"shipping_address.postal_code\"),\n        city: formData.get(\"shipping_address.city\"),\n        country_code: formData.get(\"shipping_address.country_code\"),\n        province: formData.get(\"shipping_address.province\"),\n        phone: formData.get(\"shipping_address.phone\"),\n      },\n      email: formData.get(\"email\"),\n    } as any\n\n    const sameAsBilling = formData.get(\"same_as_billing\")\n    if (sameAsBilling === \"on\") data.billing_address = data.shipping_address\n\n    if (sameAsBilling !== \"on\")\n      data.billing_address = {\n        first_name: formData.get(\"billing_address.first_name\"),\n        last_name: formData.get(\"billing_address.last_name\"),\n        address_1: formData.get(\"billing_address.address_1\"),\n        address_2: \"\",\n        company: formData.get(\"billing_address.company\"),\n        postal_code: formData.get(\"billing_address.postal_code\"),\n        city: formData.get(\"billing_address.city\"),\n        country_code: formData.get(\"billing_address.country_code\"),\n        province: formData.get(\"billing_address.province\"),\n        phone: formData.get(\"billing_address.phone\"),\n      }\n    await updateCart(data)\n  } catch (e: any) {\n    return e.message\n  }\n\n  redirect(\n    `/${formData.get(\"shipping_address.country_code\")}/checkout?step=delivery`\n  )\n}\n\n/**\n * Places an order for a cart. If no cart ID is provided, it will use the cart ID from the cookies.\n * @param cartId - optional - The ID of the cart to place an order for.\n * @returns The cart object if the order was successful, or null if not.\n */\nexport async function placeOrder(cartId?: string) {\n  const id = cartId || (await getCartId())\n\n  if (!id) {\n    throw new Error(\"No existing cart found when placing an order\")\n  }\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  const cartRes = await sdk.store.cart\n    .complete(id, {}, headers)\n    .then(async (cartRes) => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n      return cartRes\n    })\n    .catch(medusaError)\n\n  if (cartRes?.type === \"order\") {\n    const countryCode =\n      cartRes.order.shipping_address?.country_code?.toLowerCase()\n\n    const orderCacheTag = await getCacheTag(\"orders\")\n    revalidateTag(orderCacheTag)\n\n    removeCartId()\n    redirect(`/${countryCode}/order/${cartRes?.order.id}/confirmed`)\n  }\n\n  return cartRes.cart\n}\n\n/**\n * Updates the countrycode param and revalidates the regions cache\n * @param regionId\n * @param countryCode\n */\nexport async function updateRegion(countryCode: string, currentPath: string) {\n  const cartId = await getCartId()\n  const region = await getRegion(countryCode)\n\n  if (!region) {\n    throw new Error(`Region not found for country code: ${countryCode}`)\n  }\n\n  if (cartId) {\n    await updateCart({ region_id: region.id })\n    const cartCacheTag = await getCacheTag(\"carts\")\n    revalidateTag(cartCacheTag)\n  }\n\n  const regionCacheTag = await getCacheTag(\"regions\")\n  revalidateTag(regionCacheTag)\n\n  const productsCacheTag = await getCacheTag(\"products\")\n  revalidateTag(productsCacheTag)\n\n  redirect(`/${countryCode}${currentPath}`)\n}\n\nexport async function listCartOptions() {\n  const cartId = await getCartId()\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n  const next = {\n    ...(await getCacheOptions(\"shippingOptions\")),\n  }\n\n  return await sdk.client.fetch<{\n    shipping_options: HttpTypes.StoreCartShippingOption[]\n  }>(\"/store/shipping-options\", {\n    query: { cart_id: cartId },\n    next,\n    headers,\n    cache: \"force-cache\",\n  })\n}\n"],"names":[],"mappings":";;;;;;IA8PsB,kBAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 839, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/My-Files/medusa-frontend/src/lib/data/cart.ts"],"sourcesContent":["\"use server\"\n\nimport { sdk } from \"@lib/config\"\nimport medusaError from \"@lib/util/medusa-error\"\nimport { HttpTypes } from \"@medusajs/types\"\nimport { revalidateTag } from \"next/cache\"\nimport { redirect } from \"next/navigation\"\nimport {\n  getAuthHeaders,\n  getCacheOptions,\n  getCacheTag,\n  getCartId,\n  removeCartId,\n  setCartId,\n} from \"./cookies\"\nimport { getRegion } from \"./regions\"\n\n/**\n * Retrieves a cart by its ID. If no ID is provided, it will use the cart ID from the cookies.\n * @param cartId - optional - The ID of the cart to retrieve.\n * @returns The cart object if found, or null if not found.\n */\nexport async function retrieveCart(cartId?: string) {\n  const id = cartId || (await getCartId())\n\n  if (!id) {\n    return null\n  }\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  const next = {\n    ...(await getCacheOptions(\"carts\")),\n  }\n\n  return await sdk.client\n    .fetch<HttpTypes.StoreCartResponse>(`/store/carts/${id}`, {\n      method: \"GET\",\n      query: {\n        fields:\n          \"*items, *region, *items.product, *items.variant, *items.thumbnail, *items.metadata, +items.total, *promotions, +shipping_methods.name\",\n      },\n      headers,\n      next,\n      cache: \"force-cache\",\n    })\n    .then(({ cart }) => cart)\n    .catch(() => null)\n}\n\nexport async function getOrSetCart(countryCode: string) {\n  const region = await getRegion(countryCode)\n\n  if (!region) {\n    throw new Error(`Region not found for country code: ${countryCode}`)\n  }\n\n  let cart = await retrieveCart()\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  if (!cart) {\n    const cartResp = await sdk.store.cart.create(\n      { region_id: region.id },\n      {},\n      headers\n    )\n    cart = cartResp.cart\n\n    await setCartId(cart.id)\n\n    const cartCacheTag = await getCacheTag(\"carts\")\n    revalidateTag(cartCacheTag)\n  }\n\n  if (cart && cart?.region_id !== region.id) {\n    await sdk.store.cart.update(cart.id, { region_id: region.id }, {}, headers)\n    const cartCacheTag = await getCacheTag(\"carts\")\n    revalidateTag(cartCacheTag)\n  }\n\n  return cart\n}\n\nexport async function updateCart(data: HttpTypes.StoreUpdateCart) {\n  const cartId = await getCartId()\n\n  if (!cartId) {\n    throw new Error(\"No existing cart found, please create one before updating\")\n  }\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  return sdk.store.cart\n    .update(cartId, data, {}, headers)\n    .then(async ({ cart }) => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n\n      const fulfillmentCacheTag = await getCacheTag(\"fulfillment\")\n      revalidateTag(fulfillmentCacheTag)\n\n      return cart\n    })\n    .catch(medusaError)\n}\n\nexport async function addToCart({\n  variantId,\n  quantity,\n  countryCode,\n}: {\n  variantId: string\n  quantity: number\n  countryCode: string\n}) {\n  if (!variantId) {\n    throw new Error(\"Missing variant ID when adding to cart\")\n  }\n\n  const cart = await getOrSetCart(countryCode)\n\n  if (!cart) {\n    throw new Error(\"Error retrieving or creating cart\")\n  }\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  await sdk.store.cart\n    .createLineItem(\n      cart.id,\n      {\n        variant_id: variantId,\n        quantity,\n      },\n      {},\n      headers\n    )\n    .then(async () => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n\n      const fulfillmentCacheTag = await getCacheTag(\"fulfillment\")\n      revalidateTag(fulfillmentCacheTag)\n    })\n    .catch(medusaError)\n}\n\nexport async function updateLineItem({\n  lineId,\n  quantity,\n}: {\n  lineId: string\n  quantity: number\n}) {\n  if (!lineId) {\n    throw new Error(\"Missing lineItem ID when updating line item\")\n  }\n\n  const cartId = await getCartId()\n\n  if (!cartId) {\n    throw new Error(\"Missing cart ID when updating line item\")\n  }\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  await sdk.store.cart\n    .updateLineItem(cartId, lineId, { quantity }, {}, headers)\n    .then(async () => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n\n      const fulfillmentCacheTag = await getCacheTag(\"fulfillment\")\n      revalidateTag(fulfillmentCacheTag)\n    })\n    .catch(medusaError)\n}\n\nexport async function deleteLineItem(lineId: string) {\n  if (!lineId) {\n    throw new Error(\"Missing lineItem ID when deleting line item\")\n  }\n\n  const cartId = await getCartId()\n\n  if (!cartId) {\n    throw new Error(\"Missing cart ID when deleting line item\")\n  }\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  await sdk.store.cart\n    .deleteLineItem(cartId, lineId, headers)\n    .then(async () => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n\n      const fulfillmentCacheTag = await getCacheTag(\"fulfillment\")\n      revalidateTag(fulfillmentCacheTag)\n    })\n    .catch(medusaError)\n}\n\nexport async function setShippingMethod({\n  cartId,\n  shippingMethodId,\n}: {\n  cartId: string\n  shippingMethodId: string\n}) {\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  return sdk.store.cart\n    .addShippingMethod(cartId, { option_id: shippingMethodId }, {}, headers)\n    .then(async () => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n    })\n    .catch(medusaError)\n}\n\nexport async function initiatePaymentSession(\n  cart: HttpTypes.StoreCart,\n  data: HttpTypes.StoreInitializePaymentSession\n) {\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  return sdk.store.payment\n    .initiatePaymentSession(cart, data, {}, headers)\n    .then(async (resp) => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n      return resp\n    })\n    .catch(medusaError)\n}\n\nexport async function applyPromotions(codes: string[]) {\n  const cartId = await getCartId()\n\n  if (!cartId) {\n    throw new Error(\"No existing cart found\")\n  }\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  return sdk.store.cart\n    .update(cartId, { promo_codes: codes }, {}, headers)\n    .then(async () => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n\n      const fulfillmentCacheTag = await getCacheTag(\"fulfillment\")\n      revalidateTag(fulfillmentCacheTag)\n    })\n    .catch(medusaError)\n}\n\nexport async function applyGiftCard(code: string) {\n  //   const cartId = getCartId()\n  //   if (!cartId) return \"No cartId cookie found\"\n  //   try {\n  //     await updateCart(cartId, { gift_cards: [{ code }] }).then(() => {\n  //       revalidateTag(\"cart\")\n  //     })\n  //   } catch (error: any) {\n  //     throw error\n  //   }\n}\n\nexport async function removeDiscount(code: string) {\n  // const cartId = getCartId()\n  // if (!cartId) return \"No cartId cookie found\"\n  // try {\n  //   await deleteDiscount(cartId, code)\n  //   revalidateTag(\"cart\")\n  // } catch (error: any) {\n  //   throw error\n  // }\n}\n\nexport async function removeGiftCard(\n  codeToRemove: string,\n  giftCards: any[]\n  // giftCards: GiftCard[]\n) {\n  //   const cartId = getCartId()\n  //   if (!cartId) return \"No cartId cookie found\"\n  //   try {\n  //     await updateCart(cartId, {\n  //       gift_cards: [...giftCards]\n  //         .filter((gc) => gc.code !== codeToRemove)\n  //         .map((gc) => ({ code: gc.code })),\n  //     }).then(() => {\n  //       revalidateTag(\"cart\")\n  //     })\n  //   } catch (error: any) {\n  //     throw error\n  //   }\n}\n\nexport async function submitPromotionForm(\n  currentState: unknown,\n  formData: FormData\n) {\n  const code = formData.get(\"code\") as string\n  try {\n    await applyPromotions([code])\n  } catch (e: any) {\n    return e.message\n  }\n}\n\n// TODO: Pass a POJO instead of a form entity here\nexport async function setAddresses(currentState: unknown, formData: FormData) {\n  try {\n    if (!formData) {\n      throw new Error(\"No form data found when setting addresses\")\n    }\n    const cartId = getCartId()\n    if (!cartId) {\n      throw new Error(\"No existing cart found when setting addresses\")\n    }\n\n    const data = {\n      shipping_address: {\n        first_name: formData.get(\"shipping_address.first_name\"),\n        last_name: formData.get(\"shipping_address.last_name\"),\n        address_1: formData.get(\"shipping_address.address_1\"),\n        address_2: \"\",\n        company: formData.get(\"shipping_address.company\"),\n        postal_code: formData.get(\"shipping_address.postal_code\"),\n        city: formData.get(\"shipping_address.city\"),\n        country_code: formData.get(\"shipping_address.country_code\"),\n        province: formData.get(\"shipping_address.province\"),\n        phone: formData.get(\"shipping_address.phone\"),\n      },\n      email: formData.get(\"email\"),\n    } as any\n\n    const sameAsBilling = formData.get(\"same_as_billing\")\n    if (sameAsBilling === \"on\") data.billing_address = data.shipping_address\n\n    if (sameAsBilling !== \"on\")\n      data.billing_address = {\n        first_name: formData.get(\"billing_address.first_name\"),\n        last_name: formData.get(\"billing_address.last_name\"),\n        address_1: formData.get(\"billing_address.address_1\"),\n        address_2: \"\",\n        company: formData.get(\"billing_address.company\"),\n        postal_code: formData.get(\"billing_address.postal_code\"),\n        city: formData.get(\"billing_address.city\"),\n        country_code: formData.get(\"billing_address.country_code\"),\n        province: formData.get(\"billing_address.province\"),\n        phone: formData.get(\"billing_address.phone\"),\n      }\n    await updateCart(data)\n  } catch (e: any) {\n    return e.message\n  }\n\n  redirect(\n    `/${formData.get(\"shipping_address.country_code\")}/checkout?step=delivery`\n  )\n}\n\n/**\n * Places an order for a cart. If no cart ID is provided, it will use the cart ID from the cookies.\n * @param cartId - optional - The ID of the cart to place an order for.\n * @returns The cart object if the order was successful, or null if not.\n */\nexport async function placeOrder(cartId?: string) {\n  const id = cartId || (await getCartId())\n\n  if (!id) {\n    throw new Error(\"No existing cart found when placing an order\")\n  }\n\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n\n  const cartRes = await sdk.store.cart\n    .complete(id, {}, headers)\n    .then(async (cartRes) => {\n      const cartCacheTag = await getCacheTag(\"carts\")\n      revalidateTag(cartCacheTag)\n      return cartRes\n    })\n    .catch(medusaError)\n\n  if (cartRes?.type === \"order\") {\n    const countryCode =\n      cartRes.order.shipping_address?.country_code?.toLowerCase()\n\n    const orderCacheTag = await getCacheTag(\"orders\")\n    revalidateTag(orderCacheTag)\n\n    removeCartId()\n    redirect(`/${countryCode}/order/${cartRes?.order.id}/confirmed`)\n  }\n\n  return cartRes.cart\n}\n\n/**\n * Updates the countrycode param and revalidates the regions cache\n * @param regionId\n * @param countryCode\n */\nexport async function updateRegion(countryCode: string, currentPath: string) {\n  const cartId = await getCartId()\n  const region = await getRegion(countryCode)\n\n  if (!region) {\n    throw new Error(`Region not found for country code: ${countryCode}`)\n  }\n\n  if (cartId) {\n    await updateCart({ region_id: region.id })\n    const cartCacheTag = await getCacheTag(\"carts\")\n    revalidateTag(cartCacheTag)\n  }\n\n  const regionCacheTag = await getCacheTag(\"regions\")\n  revalidateTag(regionCacheTag)\n\n  const productsCacheTag = await getCacheTag(\"products\")\n  revalidateTag(productsCacheTag)\n\n  redirect(`/${countryCode}${currentPath}`)\n}\n\nexport async function listCartOptions() {\n  const cartId = await getCartId()\n  const headers = {\n    ...(await getAuthHeaders()),\n  }\n  const next = {\n    ...(await getCacheOptions(\"shippingOptions\")),\n  }\n\n  return await sdk.client.fetch<{\n    shipping_options: HttpTypes.StoreCartShippingOption[]\n  }>(\"/store/shipping-options\", {\n    query: { cart_id: cartId },\n    next,\n    headers,\n    cache: \"force-cache\",\n  })\n}\n"],"names":[],"mappings":";;;;;;IAgUsB,sBAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 852, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/My-Files/medusa-frontend/src/modules/common/icons/trash.tsx"],"sourcesContent":["import React from \"react\"\n\nimport { IconProps } from \"types/icon\"\n\nconst Trash: React.FC<IconProps> = ({\n  size = \"16\",\n  color = \"currentColor\",\n  ...attributes\n}) => {\n  return (\n    <svg\n      width={size}\n      height={size}\n      viewBox=\"0 0 20 20\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...attributes}\n    >\n      <path\n        d=\"M3.33301 5.49054H4.81449H16.6663\"\n        stroke={color}\n        strokeWidth=\"1.5\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n      <path\n        d=\"M7.14286 5.5V4C7.14286 3.60218 7.29337 3.22064 7.56128 2.93934C7.82919 2.65804 8.19255 2.5 8.57143 2.5H11.4286C11.8075 2.5 12.1708 2.65804 12.4387 2.93934C12.7066 3.22064 12.8571 3.60218 12.8571 4V5.5M15 5.5V16C15 16.3978 14.8495 16.7794 14.5816 17.0607C14.3137 17.342 13.9503 17.5 13.5714 17.5H6.42857C6.04969 17.5 5.68633 17.342 5.41842 17.0607C5.15051 16.7794 5 16.3978 5 16V5.5H15Z\"\n        stroke={color}\n        strokeWidth=\"1.5\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n      <path\n        d=\"M8.33203 9.23724V13.4039\"\n        stroke={color}\n        strokeWidth=\"1.5\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n      <path\n        d=\"M11.666 9.23724V13.4039\"\n        stroke={color}\n        strokeWidth=\"1.5\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n    </svg>\n  )\n}\n\nexport default Trash\n"],"names":[],"mappings":";;;;;AAIA,MAAM,QAA6B,CAAC,EAClC,OAAO,IAAI,EACX,QAAQ,cAAc,EACtB,GAAG,YACJ;IACC,qBACE,8OAAC;QACC,OAAO;QACP,QAAQ;QACR,SAAQ;QACR,MAAK;QACL,OAAM;QACL,GAAG,UAAU;;0BAEd,8OAAC;gBACC,GAAE;gBACF,QAAQ;gBACR,aAAY;gBACZ,eAAc;gBACd,gBAAe;;;;;;0BAEjB,8OAAC;gBACC,GAAE;gBACF,QAAQ;gBACR,aAAY;gBACZ,eAAc;gBACd,gBAAe;;;;;;0BAEjB,8OAAC;gBACC,GAAE;gBACF,QAAQ;gBACR,aAAY;gBACZ,eAAc;gBACd,gBAAe;;;;;;0BAEjB,8OAAC;gBACC,GAAE;gBACF,QAAQ;gBACR,aAAY;gBACZ,eAAc;gBACd,gBAAe;;;;;;;;;;;;AAIvB;uCAEe","debugId":null}},
    {"offset": {"line": 924, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/My-Files/medusa-frontend/src/modules/checkout/components/submit-button/index.tsx"],"sourcesContent":["\"use client\"\n\nimport { Button } from \"@medusajs/ui\"\nimport React from \"react\"\nimport { useFormStatus } from \"react-dom\"\n\nexport function SubmitButton({\n  children,\n  variant = \"primary\",\n  className,\n  \"data-testid\": dataTestId,\n}: {\n  children: React.ReactNode\n  variant?: \"primary\" | \"secondary\" | \"transparent\" | \"danger\" | null\n  className?: string\n  \"data-testid\"?: string\n}) {\n  const { pending } = useFormStatus()\n\n  return (\n    <Button\n      size=\"large\"\n      className={className}\n      type=\"submit\"\n      isLoading={pending}\n      variant={variant || \"primary\"}\n      data-testid={dataTestId}\n    >\n      {children}\n    </Button>\n  )\n}\n"],"names":[],"mappings":";;;;AAEA;AAEA;AAJA;;;;AAMO,SAAS,aAAa,EAC3B,QAAQ,EACR,UAAU,SAAS,EACnB,SAAS,EACT,eAAe,UAAU,EAM1B;IACC,MAAM,EAAE,OAAO,EAAE,GAAG,CAAA,GAAA,4MAAA,CAAA,gBAAa,AAAD;IAEhC,qBACE,8OAAC,iLAAA,CAAA,SAAM;QACL,MAAK;QACL,WAAW;QACX,MAAK;QACL,WAAW;QACX,SAAS,WAAW;QACpB,eAAa;kBAEZ;;;;;;AAGP","debugId":null}},
    {"offset": {"line": 956, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/My-Files/medusa-frontend/src/modules/checkout/components/discount-code/index.tsx"],"sourcesContent":["\"use client\"\n\nimport { Badge, Heading, Input, Label, Text, Tooltip } from \"@medusajs/ui\"\nimport React, { useActionState } from \"react\";\n\nimport { applyPromotions, submitPromotionForm } from \"@lib/data/cart\"\nimport { convertToLocale } from \"@lib/util/money\"\nimport { InformationCircleSolid } from \"@medusajs/icons\"\nimport { HttpTypes } from \"@medusajs/types\"\nimport Trash from \"@modules/common/icons/trash\"\nimport ErrorMessage from \"../error-message\"\nimport { SubmitButton } from \"../submit-button\"\n\ntype DiscountCodeProps = {\n  cart: HttpTypes.StoreCart & {\n    promotions: HttpTypes.StorePromotion[]\n  }\n}\n\nconst DiscountCode: React.FC<DiscountCodeProps> = ({ cart }) => {\n  const [isOpen, setIsOpen] = React.useState(false)\n\n  const { items = [], promotions = [] } = cart\n  const removePromotionCode = async (code: string) => {\n    const validPromotions = promotions.filter(\n      (promotion) => promotion.code !== code\n    )\n\n    await applyPromotions(\n      validPromotions.filter((p) => p.code === undefined).map((p) => p.code!)\n    )\n  }\n\n  const addPromotionCode = async (formData: FormData) => {\n    const code = formData.get(\"code\")\n    if (!code) {\n      return\n    }\n    const input = document.getElementById(\"promotion-input\") as HTMLInputElement\n    const codes = promotions\n      .filter((p) => p.code === undefined)\n      .map((p) => p.code!)\n    codes.push(code.toString())\n\n    await applyPromotions(codes)\n\n    if (input) {\n      input.value = \"\"\n    }\n  }\n\n  const [message, formAction] = useActionState(submitPromotionForm, null)\n\n  return (\n    <div className=\"w-full bg-white flex flex-col\">\n      <div className=\"txt-medium\">\n        <form action={(a) => addPromotionCode(a)} className=\"w-full mb-5\">\n          <Label className=\"flex gap-x-1 my-2 items-center\">\n            <button\n              onClick={() => setIsOpen(!isOpen)}\n              type=\"button\"\n              className=\"txt-medium text-ui-fg-interactive hover:text-ui-fg-interactive-hover\"\n              data-testid=\"add-discount-button\"\n            >\n              Add Promotion Code(s)\n            </button>\n\n            {/* <Tooltip content=\"You can add multiple promotion codes\">\n              <InformationCircleSolid color=\"var(--fg-muted)\" />\n            </Tooltip> */}\n          </Label>\n\n          {isOpen && (\n            <>\n              <div className=\"flex w-full gap-x-2\">\n                <Input\n                  className=\"size-full\"\n                  id=\"promotion-input\"\n                  name=\"code\"\n                  type=\"text\"\n                  autoFocus={false}\n                  data-testid=\"discount-input\"\n                />\n                <SubmitButton\n                  variant=\"secondary\"\n                  data-testid=\"discount-apply-button\"\n                >\n                  Apply\n                </SubmitButton>\n              </div>\n\n              <ErrorMessage\n                error={message}\n                data-testid=\"discount-error-message\"\n              />\n            </>\n          )}\n        </form>\n\n        {promotions.length > 0 && (\n          <div className=\"w-full flex items-center\">\n            <div className=\"flex flex-col w-full\">\n              <Heading className=\"txt-medium mb-2\">\n                Promotion(s) applied:\n              </Heading>\n\n              {promotions.map((promotion) => {\n                return (\n                  <div\n                    key={promotion.id}\n                    className=\"flex items-center justify-between w-full max-w-full mb-2\"\n                    data-testid=\"discount-row\"\n                  >\n                    <Text className=\"flex gap-x-1 items-baseline txt-small-plus w-4/5 pr-1\">\n                      <span className=\"truncate\" data-testid=\"discount-code\">\n                        <Badge\n                          color={promotion.is_automatic ? \"green\" : \"grey\"}\n                          size=\"small\"\n                        >\n                          {promotion.code}\n                        </Badge>{\" \"}\n                        (\n                        {promotion.application_method?.value !== undefined &&\n                          promotion.application_method.currency_code !==\n                            undefined && (\n                            <>\n                              {promotion.application_method.type ===\n                              \"percentage\"\n                                ? `${promotion.application_method.value}%`\n                                : convertToLocale({\n                                    amount: promotion.application_method.value,\n                                    currency_code:\n                                      promotion.application_method\n                                        .currency_code,\n                                  })}\n                            </>\n                          )}\n                        )\n                        {/* {promotion.is_automatic && (\n                          <Tooltip content=\"This promotion is automatically applied\">\n                            <InformationCircleSolid className=\"inline text-zinc-400\" />\n                          </Tooltip>\n                        )} */}\n                      </span>\n                    </Text>\n                    {!promotion.is_automatic && (\n                      <button\n                        className=\"flex items-center\"\n                        onClick={() => {\n                          if (!promotion.code) {\n                            return\n                          }\n\n                          removePromotionCode(promotion.code)\n                        }}\n                        data-testid=\"remove-discount-button\"\n                      >\n                        <Trash size={14} />\n                        <span className=\"sr-only\">\n                          Remove discount code from order\n                        </span>\n                      </button>\n                    )}\n                  </div>\n                )\n              })}\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  )\n}\n\nexport default DiscountCode\n"],"names":[],"mappings":";;;;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AACA;AAGA;AACA;AACA;AAXA;;;;;;;;;AAmBA,MAAM,eAA4C,CAAC,EAAE,IAAI,EAAE;IACzD,MAAM,CAAC,QAAQ,UAAU,GAAG,qMAAA,CAAA,UAAK,CAAC,QAAQ,CAAC;IAE3C,MAAM,EAAE,QAAQ,EAAE,EAAE,aAAa,EAAE,EAAE,GAAG;IACxC,MAAM,sBAAsB,OAAO;QACjC,MAAM,kBAAkB,WAAW,MAAM,CACvC,CAAC,YAAc,UAAU,IAAI,KAAK;QAGpC,MAAM,CAAA,GAAA,0JAAA,CAAA,kBAAe,AAAD,EAClB,gBAAgB,MAAM,CAAC,CAAC,IAAM,EAAE,IAAI,KAAK,WAAW,GAAG,CAAC,CAAC,IAAM,EAAE,IAAI;IAEzE;IAEA,MAAM,mBAAmB,OAAO;QAC9B,MAAM,OAAO,SAAS,GAAG,CAAC;QAC1B,IAAI,CAAC,MAAM;YACT;QACF;QACA,MAAM,QAAQ,SAAS,cAAc,CAAC;QACtC,MAAM,QAAQ,WACX,MAAM,CAAC,CAAC,IAAM,EAAE,IAAI,KAAK,WACzB,GAAG,CAAC,CAAC,IAAM,EAAE,IAAI;QACpB,MAAM,IAAI,CAAC,KAAK,QAAQ;QAExB,MAAM,CAAA,GAAA,0JAAA,CAAA,kBAAe,AAAD,EAAE;QAEtB,IAAI,OAAO;YACT,MAAM,KAAK,GAAG;QAChB;IACF;IAEA,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,qMAAA,CAAA,iBAAc,AAAD,EAAE,0JAAA,CAAA,sBAAmB,EAAE;IAElE,qBACE,8OAAC;QAAI,WAAU;kBACb,cAAA,8OAAC;YAAI,WAAU;;8BACb,8OAAC;oBAAK,QAAQ,CAAC,IAAM,iBAAiB;oBAAI,WAAU;;sCAClD,8OAAC,+KAAA,CAAA,QAAK;4BAAC,WAAU;sCACf,cAAA,8OAAC;gCACC,SAAS,IAAM,UAAU,CAAC;gCAC1B,MAAK;gCACL,WAAU;gCACV,eAAY;0CACb;;;;;;;;;;;wBASF,wBACC;;8CACE,8OAAC;oCAAI,WAAU;;sDACb,8OAAC,+KAAA,CAAA,QAAK;4CACJ,WAAU;4CACV,IAAG;4CACH,MAAK;4CACL,MAAK;4CACL,WAAW;4CACX,eAAY;;;;;;sDAEd,8OAAC,sKAAA,CAAA,eAAY;4CACX,SAAQ;4CACR,eAAY;sDACb;;;;;;;;;;;;8CAKH,8OAAC,sKAAA,CAAA,UAAY;oCACX,OAAO;oCACP,eAAY;;;;;;;;;;;;;;gBAMnB,WAAW,MAAM,GAAG,mBACnB,8OAAC;oBAAI,WAAU;8BACb,cAAA,8OAAC;wBAAI,WAAU;;0CACb,8OAAC,mLAAA,CAAA,UAAO;gCAAC,WAAU;0CAAkB;;;;;;4BAIpC,WAAW,GAAG,CAAC,CAAC;gCACf,qBACE,8OAAC;oCAEC,WAAU;oCACV,eAAY;;sDAEZ,8OAAC,6KAAA,CAAA,OAAI;4CAAC,WAAU;sDACd,cAAA,8OAAC;gDAAK,WAAU;gDAAW,eAAY;;kEACrC,8OAAC,+KAAA,CAAA,QAAK;wDACJ,OAAO,UAAU,YAAY,GAAG,UAAU;wDAC1C,MAAK;kEAEJ,UAAU,IAAI;;;;;;oDACR;oDAAI;oDAEZ,UAAU,kBAAkB,EAAE,UAAU,aACvC,UAAU,kBAAkB,CAAC,aAAa,KACxC,2BACA;kEACG,UAAU,kBAAkB,CAAC,IAAI,KAClC,eACI,GAAG,UAAU,kBAAkB,CAAC,KAAK,CAAC,CAAC,CAAC,GACxC,CAAA,GAAA,2HAAA,CAAA,kBAAe,AAAD,EAAE;4DACd,QAAQ,UAAU,kBAAkB,CAAC,KAAK;4DAC1C,eACE,UAAU,kBAAkB,CACzB,aAAa;wDACpB;;oDAEN;;;;;;;;;;;;wCASP,CAAC,UAAU,YAAY,kBACtB,8OAAC;4CACC,WAAU;4CACV,SAAS;gDACP,IAAI,CAAC,UAAU,IAAI,EAAE;oDACnB;gDACF;gDAEA,oBAAoB,UAAU,IAAI;4CACpC;4CACA,eAAY;;8DAEZ,8OAAC,2IAAA,CAAA,UAAK;oDAAC,MAAM;;;;;;8DACb,8OAAC;oDAAK,WAAU;8DAAU;;;;;;;;;;;;;mCAjDzB,UAAU,EAAE;;;;;4BAwDvB;;;;;;;;;;;;;;;;;;;;;;;AAOd;uCAEe","debugId":null}},
    {"offset": {"line": 1198, "column": 0}, "map": {"version":3,"sources":["file:///Volumes/My-Files/medusa-frontend/src/modules/cart/templates/summary.tsx"],"sourcesContent":["\"use client\"\n\nimport { Button, Heading } from \"@medusajs/ui\"\n\nimport CartTotals from \"@modules/common/components/cart-totals\"\nimport Divider from \"@modules/common/components/divider\"\nimport DiscountCode from \"@modules/checkout/components/discount-code\"\nimport LocalizedClientLink from \"@modules/common/components/localized-client-link\"\nimport { HttpTypes } from \"@medusajs/types\"\n\ntype SummaryProps = {\n  cart: HttpTypes.StoreCart & {\n    promotions: HttpTypes.StorePromotion[]\n  }\n}\n\nfunction getCheckoutStep(cart: HttpTypes.StoreCart) {\n  if (!cart?.shipping_address?.address_1 || !cart.email) {\n    return \"address\"\n  } else if (cart?.shipping_methods?.length === 0) {\n    return \"delivery\"\n  } else {\n    return \"payment\"\n  }\n}\n\nconst Summary = ({ cart }: SummaryProps) => {\n  const step = getCheckoutStep(cart)\n\n  return (\n    <div className=\"flex flex-col gap-y-4\">\n      <Heading level=\"h2\" className=\"text-[2rem] leading-[2.75rem]\">\n        Summary\n      </Heading>\n      <DiscountCode cart={cart} />\n      <Divider />\n      <CartTotals totals={cart} />\n      <LocalizedClientLink\n        href={\"/checkout?step=\" + step}\n        data-testid=\"checkout-button\"\n      >\n        <Button className=\"w-full h-10\">Go to checkout</Button>\n      </LocalizedClientLink>\n    </div>\n  )\n}\n\nexport default Summary\n"],"names":[],"mappings":";;;;AAEA;AAAA;AAEA;AACA;AACA;AACA;AAPA;;;;;;;AAgBA,SAAS,gBAAgB,IAAyB;IAChD,IAAI,CAAC,MAAM,kBAAkB,aAAa,CAAC,KAAK,KAAK,EAAE;QACrD,OAAO;IACT,OAAO,IAAI,MAAM,kBAAkB,WAAW,GAAG;QAC/C,OAAO;IACT,OAAO;QACL,OAAO;IACT;AACF;AAEA,MAAM,UAAU,CAAC,EAAE,IAAI,EAAgB;IACrC,MAAM,OAAO,gBAAgB;IAE7B,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC,mLAAA,CAAA,UAAO;gBAAC,OAAM;gBAAK,WAAU;0BAAgC;;;;;;0BAG9D,8OAAC,sKAAA,CAAA,UAAY;gBAAC,MAAM;;;;;;0BACpB,8OAAC,2JAAA,CAAA,UAAO;;;;;0BACR,8OAAC,kKAAA,CAAA,UAAU;gBAAC,QAAQ;;;;;;0BACpB,8OAAC,+KAAA,CAAA,UAAmB;gBAClB,MAAM,oBAAoB;gBAC1B,eAAY;0BAEZ,cAAA,8OAAC,iLAAA,CAAA,SAAM;oBAAC,WAAU;8BAAc;;;;;;;;;;;;;;;;;AAIxC;uCAEe","debugId":null}}]
}